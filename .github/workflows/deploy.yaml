---
name: Deploy
run-name: Deploy to ${{ inputs.deploy-environment || 'Staging' }}

on:
  workflow_dispatch:
    inputs:
      deploy-environment:
        description: 'Which environment to deploy to'
        required: true
        type: choice
        options:
          - Staging
          - Production
        default: Staging
  push:
    branches:
      - 'main' # Assuming 'main' is your primary branch for amp.dev.n2
      - 'gha-deploy-*'

jobs:
  queue:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'outdated_runs'
          cancel_others: true
          skip_after_successful_duplicate: true
          paths_ignore: '["**/README.md", "**/docs/**"]'
          do_not_skip: '["workflow_dispatch", "schedule"]'
  
  verify:
    # This job needs prepare and will use its output.
    needs: prepare # Correct dependency: runs after prepare
    runs-on: ubuntu-latest
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Setting up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Node.js 22 as per package.json
          cache: npm

      - name: Installing Node.js packages
        run: npm ci

      # --- DEBUG STEP: Print github.run_id for artifact download ---
      - name: Print github.run_id for artifact download
        run: echo "Attempting to download artifact with run-id: ${{ github.run_id }}"
      # -----------------------------------------------------------

      - name: Fetching build artifacts for tests
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare.outputs.artifact_name }} # Use output from prepare job
          path: artifacts # Download to a temporary 'artifacts' directory
          run-id: ${{ github.run_id }} # Explicitly specify the current workflow run ID

      # --- DEBUG STEP: List downloaded artifacts ---
      - name: List downloaded artifacts
        run: ls -R artifacts
      # ---------------------------------------------

      - name: Unpacking artifacts for tests
        run: |
          tar xf artifacts/build-setup/setup.tar.gz -C . # Unpack the tarball from artifacts/build-setup into the current directory
          rm -rf artifacts # Clean up the downloaded artifact directory

      # --- DEBUG STEP: List dist directory after unpacking ---
      - name: List dist directory after unpacking
        run: ls -R dist
      # -----------------------------------------------------

      - name: Running tests
        run: |
          npx gulp updateTestResources
          npx gulp lintNode
          npx gulp lintYaml
          npm run test:platform
          # npm run test:playground # Partitioned: playground is a testing environment specific to `ampproject`

  prepare:
    runs-on: ubuntu-latest
    outputs: # Define output for artifact name
      artifact_name: build-setup # Output the artifact name
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Setting up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Node.js 22 as per package.json
          cache: npm

      - name: Installing Node.js packages
        run: npm ci

      - name: Cache GitHub Importer data
        uses: actions/cache@v4
        with:
          path: |
            platform/cache
            platform/tmp
          key: ${{ runner.os }}-importer-cache-v2-${{ github.run_id }} # Changed key to force a cache miss
          restore-keys: |
            ${{ runner.os }}-importer-cache-v2-
            ${{ runner.os }}-importer-cache- # Keep old key for restoration attempt

      - name: Preparing build
        env:
          APP_ENV: production
          AMP_DOC_TOKEN: ${{ secrets.AMP_DOC_TOKEN }}
        run: |
          npx gulp buildPrepare

      # --- ADD DEBUG STEP 1: Verify build-info.yaml after buildPrepare ---
      - name: Verify build-info.yaml after buildPrepare
        run: |
          echo "Listing platform/config directory:"
          ls -l platform/config/
          echo "Attempting to cat build-info.yaml:"
          cat platform/config/build-info.yaml || echo "build-info.yaml not found or empty"
      # -----------------------------------------------------------------

      # --- DEBUG STEP: List dist/static/samples after buildPrepare ---
      - name: List dist/static/samples after buildPrepare
        run: ls -R dist/static/samples/
      # -------------------------------------------------------------

      - name: Storing build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-setup
          path: artifacts/setup.tar.gz

      # --- ADD DEBUG STEP 2: Verify artifact contents after upload ---
      - name: Verify artifact contents after upload
        run: |
          echo "Listing artifacts directory before tarball check:"
          ls -l artifacts/
          echo "Confirming setup.tar.gz exists:"
          ls -l artifacts/setup.tar.gz || echo "setup.tar.gz not found"
          echo "Listing contents of setup.tar.gz:"
          tar -tf artifacts/setup.tar.gz || echo "Failed to list tarball contents"
      # -------------------------------------------------------------

      # --- DEBUG STEP: List artifacts directory after upload ---
      - name: List artifacts directory after upload
        run: ls -R artifacts/
      # -------------------------------------------------------

  build:
    env:
      APP_ENV: production
    needs: prepare # Correctly depends on prepare
    strategy:
      matrix:
        language:
          [
            'en',
            # 'de', # Non-essential locale, partitioned
            'fr',
            # 'ar', # Non-essential locale, partitioned
            'es',
            # 'it', # Non-essential locale, partitioned
            # 'id', # Non-essential locale, partitioned
            # 'ja', # Non-essential locale, partitioned
            # 'ko', # Non-essential locale, partitioned
            'pt_BR',
            # 'ru', # Non-essential locale, partitioned
            # 'tr', # Non-essential locale, partitioned
            # 'zh_CN', # Non-essential locale, partitioned
            # 'pl', # Non-essential locale, partitioned
            # 'vi', # Non-essential locale, partitioned
          ]
    runs-on: ubuntu-latest
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Setting up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Node.js 22
          cache: npm

      - name: Installing Node.js packages
        run: npm ci

      - name: Setting up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Installing Grow
        run: |
          sudo apt-get install libyaml-dev
          pip install grow --upgrade-strategy eager

      - name: Fetching build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-setup
          path: artifacts

      - name: Unpacking artifacts
        run: |
          npx gulp unpackArtifacts

      - name: Building pages
        run: |
          npx gulp buildPages --locales ${{ matrix.language }}

      - name: Storing build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pages-${{ github.run_id }}-${{ matrix.language }}
          path: artifacts

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: Production
    env:
      APP_ENV: production
      # NETLIFY_DEPLOY_TOKEN: ${{ secrets.NETLIFY_DEPLOY_TOKEN }} # Commented out from env block as it's passed directly
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4

      - name: Setting up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22 # Node.js 22
          cache: npm

      - name: Installing Node.js packages
        run: npm ci

      - name: Fetching build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Unpacking artifacts
        run: |
          npx gulp unpackArtifacts

      - name: Finalizing build
        run: |
          npx gulp buildFinalize

      - name: Deploying
        env:
          DEPLOY_ENVIRONMENT: ${{ inputs.deploy-environment || 'Staging' }}
        run: |
          # Explicitly use Netlify CLI with your specific Site ID
          NETLIFY_AUTH_TOKEN=${{ secrets.NETLIFY_DEPLOY_TOKEN }} npx netlify deploy --prod --site 69bbcc85-2aad-4a49-be6f-b6caef14bf1a --dir /home/runner/work/amp.dev.n2/amp.dev.n2/dist/pages
          # Ensure that /home/runner/work/amp.dev.n2/amp.dev.n2/dist/pages is the correct build output directory.